@page "/searchdeletecar"
@using CarDetailsAPI.Queries;
@using CarDetailsBlazor.Interfaces;
@using CarDetailsModels;
@using CarDetailsBlazor;
@using Microsoft.AspNetCore.Mvc;
@inject ICarWebServiceAPI CarWebServiceAPI
@inject IManufacturerWebServiceAPI ManufacturerWebServiceAPI
@inject NavigationManager NavigationManager


<h3>Search And Delete</h3>

<h3>Search Car Record by ID</h3>
<div>
    <label for="searchCar">Insert Car Id:</label>
    <input id="carId" type="text" @bind="Id" />
    <button type="button" @onclick="() => SearchCarRecord(Id)" class="btn btn-primary">Search</button>
</div>
@if (carSearched == true)
{
    <h4>Car Record Found:</h4>
    <table class="table table-striped table-hover w-auto">
        <thead>
            <tr>
                <th>Id</th>
                <th>Year</th>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Displacement</th>
                <th>Cylinders</th>
                <th>City MPG</th>
                <th>Highway MPG</th>
                <th>Combined MPG</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@newCar.Id</td>
                <td>@newCar.MappedYear</td>
                <td>@newCar.MappedManufacturer</td>
                <td>@newCar.MappedName</td>
                <td>@newCar.MappedDisplacement</td>
                <td>@newCar.MappedCylinders</td>
                <td>@newCar.MappedCity</td>
                <td>@newCar.MappedHighway</td>
                <td>@newCar.MappedCombined</td>
            </tr>
        </tbody>
    </table>
    <div>
        <button type="button" @onclick="@(() => NavigationManager.NavigateTo($"/editCars/{Id}"))" class="btn btn-primary">Edit Car Record</button>
    </div>
}
@if (carSearched == true)
{
    <label class="alert alert-success" role="alert">@statusMessage</label>
}

<h3>Search Manufacturer Record by ID</h3>
<div>
    <label for="searchCar">Insert Manufacturer Id:</label>
    <input id="carId" type="text" @bind="Id" />
    <button type="button" @onclick="() => SearchManufacturerRecord(Id)" class="btn btn-primary">Search</button>
</div>
@if (manuSearched == true)
{
    <h4>Manufacturer Record Found:</h4>
    <table class="table table-striped table-hover w-auto">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Headquarters</th>
                <th>Year</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@newManufacturer.Id</td>
                <td>@newManufacturer.MappedName</td>
                <td>@newManufacturer.MappedHeadquarters</td>
                <td>@newManufacturer.MappedYear</td>
            </tr>
        </tbody>
    </table>
    <div>
        <button type="button" @onclick="@(() => NavigationManager.NavigateTo($"/editManufacturer/{Id}"))" class="btn btn-primary">Edit Manufacturer Record</button>
    </div>
}
@if (manuSearched == true)
{
    <label class="alert alert-success" role="alert">@statusMessage</label>
}

<h3>Delete Car Record by ID</h3>
<div>
    <label for="deleteCar">Insert Car Id:</label>
    <input id="carId" type="text" @bind="newCar.Id" />
    <button type="button" @onclick="() => DeleteCarRecord(newCar.Id)" class="btn btn-danger">Delete</button>
</div>
<h3>Delete Manufacturer Record by ID</h3>
<div>
    <label for="deleteCar">Insert Car Id:</label>
    <input id="carId" type="text" @bind="newManufacturer.Id" />
    <button type="button" @onclick="() => DeleteManuRecord(newManufacturer.Id)" class="btn btn-danger">Delete</button>
</div>

@if (carDeleted == true)
{
    <label class="alert alert-danger" role="alert">@statusMessage</label>
}

@code {

    private CarDetailsAPI.Models.CarsModel newCar = new();
    private CarDetailsAPI.Models.ManufacturersModel newManufacturer = new();
    private HttpClient httpClient;
    private string statusMessage;
    private bool carSearched = false;
    private bool manuSearched = false;
    private bool carDeleted;
    private bool manuDeleted;
    private int Id;




    protected override async Task OnInitializedAsync()
    {
        httpClient = new HttpClient();

    }



    private async Task SearchCarRecord(int id)
    {
        //HttpResponseMessage response = await httpClient.GetAsync($"https://localhost:7126/api/cars/{id}");
        //if (response.IsSuccessStatusCode)
        //{
        //    statusMessage = "Hell yeah! Car Found!";
        //    newCar = (Car)await response.Content.ReadFromJsonAsync<Car>();
        //    carSearched = true;
        //}
        //else
        //{
        //    statusMessage = "Car Not Found";
        //}
        try
        {
            var response = await CarWebServiceAPI.GetCarById(id);
            if (response.Car is not null)
            {
                carSearched = true;
                newCar = response.Car;
                statusMessage = "Hell yeah! Car Found!";

            }
            else
            {
                statusMessage = "Ooops!Car ID not Found!";
            }

        }
        catch (Exception e)
        {

            throw;
        }



    }
    private async Task SearchManufacturerRecord(int id)
    {
        //HttpResponseMessage response = await httpClient.GetAsync($"https://localhost:7126/api/cars/{id}");
        //if (response.IsSuccessStatusCode)
        //{
        //    statusMessage = "Hell yeah! Car Found!";
        //    newCar = (Car)await response.Content.ReadFromJsonAsync<Car>();
        //    carSearched = true;
        //}
        //else
        //{
        //    statusMessage = "Car Not Found";
        //}
        try
        {
            var response = await ManufacturerWebServiceAPI.GetManufacturerById(id);
            if (response.Manufacturer is not null)
            {

                manuSearched = true;
                newManufacturer = response.Manufacturer;
                statusMessage = "Hell yeah! Manufacturer Found!";

            }
            else
            {
                statusMessage = "Ooops!Manufacturer ID not Found!";
            }
        }
        catch (Exception e)
        {

            throw;
        }
    }

    private async Task DeleteCarRecord(int id)
    {
        //var response = await httpClient.DeleteAsync($"https://localhost:7126/api/cars/{carId}");
        //if (response.IsSuccessStatusCode)
        //{
        //    carDeleted = true;
        //    statusMessage = "Hell yeah! Car Deleted!";
        //}
        //else
        //{
        //    statusMessage = "Car Not Found";
        //}
        try
        {
            await CarWebServiceAPI.DeleteCar(id);
            statusMessage = "Hell yeah! Car Deleted!";

        }
        catch (Exception e)
        {
            // Handle any errors that occurred during the API call
        }

    }
    private async Task DeleteManuRecord(int id)
    {
        //var response = await httpClient.DeleteAsync($"https://localhost:7126/api/cars/{carId}");
        //if (response.IsSuccessStatusCode)
        //{
        //    carDeleted = true;
        //    statusMessage = "Hell yeah! Car Deleted!";
        //}
        //else
        //{
        //    statusMessage = "Car Not Found";
        //}
        try
        {
            var response = await ManufacturerWebServiceAPI.DeleteManufacturer(id);
            if (response is not null)
            {
                manuDeleted = true;
                statusMessage = "Hell yeah! Manufacturer Deleted!";
            }
        }
        catch (Exception e)
        {
            // Handle any errors that occurred during the API call
        }




    }

}
