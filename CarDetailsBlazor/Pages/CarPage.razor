@page "/car"
@using CarDetailsBlazor.Pages;
@using CarDetailsModels;
@using System.Net.Http.Json;
@using System.Net.Http;
@inject HttpClient httpClient;
<h3>Cars!</h3>


@if (JointInfoVisible == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="FirstPage" class="btn btn-success">&lt;&lt;</button>
    <button @onclick="PreviousPage" disabled="@IsFirstPage" class="btn btn-success">Previous</button>
    <button @onclick="NextPage"  class="btn btn-success">Next</button>
    <button @onclick="LastPage" class="btn btn-success">>></button>

    <table class="table table-striped table-hover w-auto">
        <thead>
            <tr>
                <th>Id</th>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Cylinders</th>
                <th>City MPG</th>
                <th>Highway MPG</th>
                <th>Combined MPG</th>
                <th>Headquarters</th>
                <th>Year</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var jointInfo in JointInfoVisible)
            {
                <tr>
                    <td>@jointInfo.Id</td>
                    <td>@jointInfo.Manufacturer</td>
                    <td>@jointInfo.Name</td>
                    <td>@jointInfo.Cylinders</td>
                    <td>@jointInfo.City</td>
                    <td>@jointInfo.Highway</td>
                    <td>@jointInfo.Combined</td>
                    <td>@jointInfo.Headquarters</td>
                    <td>@jointInfo.Year</td>
                </tr>
            }
        </tbody>
        <tbody>
            <tr class=" g-0 text-center">
                <td class="table-success"> Lowest City Fuel Consumption: @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Manufacturer,  @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Name || MPG:@JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.City</td>
                <td class="table-success"> Lowest Highway Fuel Consumption: @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Manufacturer,  @JointInfoVisible.OrderByDescending(item => item.Highway).FirstOrDefault()?.Name || MPG:@JointInfoVisible.OrderByDescending(item => item.Highway).FirstOrDefault()?.Highway</td>
                <td class="table-info"> Number of Cars Models: @JointInfoVisible.Select(c => c.Name).Distinct().Count()</td>
                <td class="table-info"> Number Of Manufacturers: @JointInfoVisible.Select(c => c.Manufacturer).Distinct().Count()</td>
            </tr>

        </tbody>

    </table>


}

@code {
    private List<JointInfo> JointInfoVisible { get; set; }
    public IEnumerable<JointInfo> jointInfo { get; set; }
    private int PageNumber { get; set; }
    private bool IsFirstPage => PageNumber == 1;
    private const int PageSize = 12;




    protected override async Task OnInitializedAsync()
    {
        PageNumber = 1;
        await LoadData(); 

    }

    private async Task<List<JointInfo>> GetJointInfo(int? PageNumber, int ? PageSize)
    {

        string url = string.Format(@"https://localhost:7126/jointinfo?page={0}&pageSize={1}", PageNumber.ToString(), PageSize.ToString());
        var response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {            
            return await response.Content.ReadFromJsonAsync<List<JointInfo>>(); 
        }
        else
        {
            throw new Exception($"Failed to get joint car info: {response.ReasonPhrase}");
        }
    }


    private async Task LoadData()
    {
        JointInfoVisible = await GetJointInfo(PageNumber, PageSize);
        StateHasChanged();
    }

    private void NextPage()
    {
        PageNumber++;
        LoadData();
    }

    private void PreviousPage()
    {

        PageNumber--;
        LoadData();
    }

    private void FirstPage()
    {
        PageNumber = 1;
        LoadData();
    }

    private async void LastPage()
    {
        int totalPages = (int)Math.Ceiling(JointInfoVisible.Count / (double)PageSize);
    PageNumber = totalPages;
    LoadData();
    }









}
