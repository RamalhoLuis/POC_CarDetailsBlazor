@page "/car"
@using CarDetailsBlazor.Pages;
<h3>Cars!</h3>


@if (cars == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover w-auto">
        <thead>
            <tr>
                <th>Manufacturer</th>
                <th>Name</th>
                <th>Cylinders</th>
                <th>City MPG</th>
                <th>Highway MPG</th>
                <th>Combined MPG</th>
                <th>Headquarters</th>
                <th>Year</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var jointInfo in JointInfoVisible)
            {

                <tr>
                    <td>@jointInfo.Manufacturer</td>
                    <td>@jointInfo.Name</td>
                    <td>@jointInfo.Cylinders</td>
                    <td>@jointInfo.City</td>
                    <td>@jointInfo.Highway</td>
                    <td>@jointInfo.Combined</td>
                    <td>@jointInfo.Headquarters</td>
                    <td>@jointInfo.Year</td>

                </tr>
            }

        </tbody>
        <tbody>
            <tr class=" g-0 text-center">
                <td class="table-success"> Lowest City Fuel Consumption: @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Manufacturer,  @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Name || MPG:@JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.City</td>
                <td class="table-success"> Lowest Highway Fuel Consumption: @JointInfoVisible.OrderByDescending(item => item.City).FirstOrDefault()?.Manufacturer,  @JointInfoVisible.OrderByDescending(item => item.Highway).FirstOrDefault()?.Name || MPG:@JointInfoVisible.OrderByDescending(item => item.Highway).FirstOrDefault()?.Highway</td>
                <td class="table-info"> Number of Cars Models: @cars.Select(c => c.Name).Distinct().Count()</td>
                <td class="table-info"> Number Of Manufacturers: @cars.Select(c => c.Manufacturer).Distinct().Count()</td>
            </tr>

        </tbody>

    </table>


    <button @onclick="PreviousPage" disabled="@IsFirstPage" class="btn btn-success">Previous</button>
    <button @onclick="NextPage" disabled="@IsLastPage" class="btn btn-success">Next</button>

}

@code {
    private List<Car> cars;
    private List<Manufacturer> manufacturers;
    private List<JointInfo> jointCarInfo;

    private List<JointInfo> JointInfoVisible { get; set; }
    private int PageNumber { get; set; }
    private bool IsFirstPage => PageNumber == 1;
    private bool IsLastPage => JointInfoVisible.Count < 15;


    protected override async Task OnInitializedAsync()
    {
        cars = GetCarsFromFile("Pages\\fuel.csv");
        manufacturers = GetManufacturersFromFile("Pages\\manufacturers.csv");

        jointCarInfo = (from car in cars
                        join manufacturer in manufacturers
                        on car.Manufacturer equals manufacturer.Name
                        select new JointInfo
                            {
                                Name = car.Name,
                                Headquarters = manufacturer.Headquarters,
                                Year = car.Year,
                                Manufacturer = car.Manufacturer,
                                Displacement = car.Displacement,
                                Cylinders = car.Cylinders,
                                City = car.City,
                                Highway = car.Highway,
                                Combined = car.Combined

                            }).OrderBy(m => m.Manufacturer).ThenBy(c => c.Name).ThenByDescending(c => c.Combined).ToList();


        LoadData();

    }


    private void LoadData()
    {
        JointInfoVisible = jointCarInfo.Skip((PageNumber - 1) * 15).Take(15).ToList();
    }

    private void NextPage()
    {
        PageNumber++;
        LoadData();
    }

    private void PreviousPage()
    {
        PageNumber--;
        LoadData();
    }

    private static List<Car> GetCarsFromFile(string path)
    {

        var query = File.ReadAllLines(path)
                .Skip(1)
                .Where(l => l.Length > 1)
                .ToCar();

        return query.ToList();
    }

    private static List<Manufacturer> GetManufacturersFromFile(string path)
    {
        var query =
                File.ReadAllLines(path)
                .Where(l => l.Length > 1)
                .Select(l =>
                {
                    var columns = l.Split(',');
                    return new Manufacturer
                        {
                            Name = columns[0],
                            Headquarters = columns[1],
                            Year = int.Parse(columns[2])
                        };
                });
        return query.ToList();
    }








}
